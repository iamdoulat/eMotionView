// This is an autogenerated file from Firebase Studio.
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
import { getFirestore, type DocumentData, type DocumentSnapshot } from 'firebase/firestore';
import { getStorage } from 'firebase/storage';

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,
  measurementId: process.env.NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID,
};

// Initialize Firebase
const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);

/**
 * Converts a Firestore document to a JSON object, handling Timestamps.
 * @param doc The Firestore document snapshot.
 * @returns A JSON-serializable object.
 */
export const docToJSON = (doc: DocumentSnapshot<DocumentData>) => {
  if (!doc) return null;
  const data = doc.data();
  if (!data) return null;

  const result: Record<string, any> = {};
  for (const key in data) {
    const value = data[key];
    if (value && typeof value.toDate === 'function') { // Check for Firestore Timestamp
      result[key] = value.toDate().toISOString();
    } else {
      result[key] = value;
    }
  }

  return {
    ...result,
    id: doc.id,
  };
};

export { app, auth, db, storage };
