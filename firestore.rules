
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    // Check if a user is an admin by seeing if a document with their UID exists in the 'admins' collection.
    // This is a secure and non-recursive way to check for roles.
    function isUserAdmin() {
      return isUserAuthenticated() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Products: Publicly readable/listable, only admins can write
    match /products/{productId} {
      allow list, read: if true;
      allow write: if isUserAdmin();
    }

    // Reviews: Publicly readable/listable, only authenticated users can create, only admins or owners can update/delete
    match /reviews/{reviewId} {
      allow list, read: if true;
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isUserAdmin() || (isUserAuthenticated() && resource.data.userId == request.auth.uid);
    }

    // Users:
    match /users/{userId} {
      // An admin can perform any action on any user document.
      allow list, read, write, delete: if isUserAdmin();
      
      // An authenticated user can read and update their OWN document. They cannot create new user docs here (that's done via auth trigger) or delete.
      allow read, update: if isUserAuthenticated() && request.auth.uid == userId;
    }

    // Orders: Users can only access their own orders. Admins can access all orders.
    match /orders/{orderId} {
      allow read, write: if (isUserAuthenticated() && resource.data.userId == request.auth.uid) || isUserAdmin();
      allow create: if isUserAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow list: if isUserAdmin();
    }

    // Admins collection: Only readable by other admins.
    match /admins/{userId} {
      allow read, list: if isUserAdmin();
    }
  }
}
